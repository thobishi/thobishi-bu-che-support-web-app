#arrow hash pre_pipe pipe implicit_return

compiles: 

@poly | times | map -> @create_proto()

to:

var __ = require('pipe_utils'); __.map.call(this, __.times.call(this, @poly), function() { return @create_proto() })

compiles: 

(@[key] = o.default | clone)

to:

var __ = require('pipe_utils'); (@[key] = __.clone.call(this, o.default))

      
compiles:
klass.properties = klass.properties | clone | extend props


to:
var __ = require('pipe_utils'); klass.properties = __.extend.call(this, __.clone.call(this, klass.properties), props)

compiles: 
a | map x

to:
var __ = require('pipe_utils'); __.map.call(this, a, x)


compiles:
x | each function() {
  a | map x
}

to:
var __ = require('pipe_utils'); __.each.call(this, x, function() {
  return __.map.call(this, a, x)
})


compiles:
x | run | hide()

to:
var __ = require('pipe_utils'); __.hide.call(this, __.run.call(this, x))

compiles:

x | run() | hide()

to:

var __ = require('pipe_utils'); __.hide.call(this, __.run.call(this, x))



compiles:
a
x |
  detect -> {;}
b  
to:
var __ = require('pipe_utils'); a
__
.detect.call(this, x, function() {;})
b

compiles:
a
x
  | detect function() {;}
b
to:
var __ = require('pipe_utils'); a

__.detect.call(this, x, function() {;})
b


compiles:
var x = [2] | map square
to:
var __ = require('pipe_utils'); var x = __.map.call(this, [2], square)

compiles:
var x = [1,2,3,4,5,6,7] | map square | detect more_than_10
to:
var __ = require('pipe_utils'); var x = __.detect.call(this, __.map.call(this, [1,2,3,4,5,6,7], square), more_than_10)

compiles:
a | map function() {
  return arguments[0](x[3])
}
to:
var __ = require('pipe_utils'); __.map.call(this, a, function() {
  return arguments[0](x[3])
})

compiles:
a | map -> {
  return arguments[0](x[3])
}
to:
var __ = require('pipe_utils'); __.map.call(this, a, function() {
  return arguments[0](x[3])
})


compiles:
x | run(a)
x | run(a,b)
x | reverse()

to:
var __ = require('pipe_utils'); __.run.call(this, x, a)
__.run.call(this, x, a,b)
__.reverse.call(this, x)


