compiles:
x | reverse

to:
__.reverse.call(this, x)


compiles:

x | reverse | y

to:
__.y.call(this, __.reverse.call(this, x))

compiles:

x | map {;} | .join()

to:

(__.map.call(this, x, function() {;})).join()

compiles:
x | map a 
  | detect b
  

__.detect.call(this, 
  __.map.call(this, x, a), b)

compiles:
x | map a 
  | detect b
  | times 2
to:

__.times.call(this, 
  __.detect.call(this, 
  __.map.call(this, x, a), b ) )

compiles:
{
  x++
  1
}

to:
function() {
  x++
  return 1
}

compiles:
function() {}
{}
{ }

to:
function() {}
{}
{ }


compiles:
x = {
 y
 bind!
  x(y)
  ---
  z
}

to:
var x; x = function() {
 y
 bind(function() {
  x(y) })

  z
}


compiles:

x = {
  if @_puzzle, return callback @_puzzle

  @_puzzle = Puzzle.find! @puzzle_id()
  callback @_puzzle
}

to:
 var x; x = function() {
  var _this = this; if(this._puzzle) return callback(this._puzzle)

  Puzzle.find(this.puzzle_id(), function(_0) { _this._puzzle = _0
  return callback(_this._puzzle) })
}


